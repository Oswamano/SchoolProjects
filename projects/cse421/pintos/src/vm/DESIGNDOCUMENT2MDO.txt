+---------------------------+
		    | CS 421                      |
		    | PROJECT 3: VIRTUAL MEMORY   |
		    |	DESIGN DOCUMENT           |
		    +---------------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

Matthew O’Connor mdoconno@buffalo.edu Student number 50000250
---- PRELIMINARIES ----

Due to none of my code working, I had to do a last minute clean reinstall of Pintos. Therefore, this document is going to be about what I was trying to accomplish, and therefore I am mainly just going to list ideas. Also, while I am pretty sure it compiles, if for some reason it doesn’t (I had a lot of issues with this project) can I please just get points for the default tests(the 8/34 that pass by default) passing? Thank you.
			PAGE TABLE MANAGEMENT
			=====================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

Had the idea to use a struct in order to handle the page table. Also attempted to use multiple Boolean variables to deal with the underlying kernel code.

---- ALGORITHMS ----

>> A2: In a few paragraphs, describe your code for locating the frame,
>> if any, that contains the data of a given page.

The idea was to look up frame addresses with the page table.

After this a frame would be allocated for page table entry.

>> A3: How does your code coordinate accessed and dirty bits between
>> kernel and user virtual addresses that alias a single frame, or
>> alternatively how do you avoid the issue?

Kernel(dirty bit) access could be avoided via rerouting everything through the page table.

---- SYNCHRONIZATION ----

>> A4: When two user processes both need a new frame at the same time,
>> how are races avoided?

My primary idea here was to use exclusive locks to prevent pages from having issues. A sequential eviction would happen if both processes tried to get the same frame, preventing races and solving the race condition.

---- RATIONALE ----

>> A5: Why did you choose the data structure(s) that you did for
>> representing virtual-to-physical mappings?

I chose to use structs because they are a very versatile and easy to use data structure. Structs seemed like the most efficient way to resolve page conflicts.

		       PAGING TO AND FROM DISK
		       =======================

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.


---- ALGORITHMS ----

>> B2: When a frame is required but none is free, some frame must be
>> evicted.  Describe your code for choosing a frame to evict.
One idea was to use a lock to handle eviction.


Another idea was to use the clock algorithm on frame’s whose dirty bits said they were not being accesed in order to choose a frame to evict.


>> B3: When a process P obtains a frame that was previously used by a
>> process Q, how do you adjust the page table (and any other data
>> structures) to reflect the frame Q no longer has?

Evicting a frame should remove any trace of the old frame ( or at least this was the plan). Once this happens virtual addresses will be sorted through and a page will be cleared.

>> B4: Explain your heuristic for deciding whether a page fault for an
>> invalid virtual address should cause the stack to be extended into
>> the page that faulted.

The idea was to look for a user address that was more than 32 bits different than the user address, as this is what could be caused by the PUSHA instruction.

---- SYNCHRONIZATION ----

>> B5: Explain the basics of your VM synchronization design.  In
>> particular, explain how it prevents deadlock.  (Refer to the
>> textbook for an explanation of the necessary conditions for
>> deadlock.)

I didn’t really get this one, the idea was to combine locks, a system wide page table, and then evict frames with a pinned flag.

>> B6: A page fault in process P can cause another process Q's frame
>> to be evicted.  How do you ensure that Q cannot access or modify
>> the page during the eviction process?  How do you avoid a race
>> between P evicting Q's frame and Q faulting the page back in?

The idea was to not exit a page fault until the faulting process was done. When another process then tries to reload the fault must be reloaded as well.
The use of locks during eviction was the idea behind this.

>> B7: Suppose a page fault in process P causes a page to be read from
>> the file system or swap.  How do you ensure that a second process Q
>> cannot interfere by e.g. attempting to evict the frame while it is
>> still being read in?

While P loads part of it is pinned. We pin the part of the frame table that can be evicted until it is done being processed and it should be not choosed again.


>> B8: Explain how you handle access to paged-out pages that occur
>> during system calls.  Do you use page faults to bring in pages (as
>> in user programs), or do you have a mechanism for "locking" frames
>> into physical memory, or do you use some other design?  How do you
>> gracefully handle attempted accesses to invalid virtual addresses?

Pages are checked before system calls are performed on them. If pages are paged out they are paged back in. Page faults allow the kernel to load user pages from memory so this is doable.


---- RATIONALE ----

>> B9: A single lock for the whole VM system would make
>> synchronization easy, but limit parallelism.  On the other hand,
>> using many locks complicates synchronization and raises the
>> possibility for deadlock but allows for high parallelism.  Explain
>> where your design falls along this continuum and why you chose to
>> design it this way.

I really don’t know where my design falls along the scale, but I was shooting for a balance of these two aspects. Synchronization and parallelism are both desired traits in an operating system. Parallelism can cause deadlocks, so too much can be bad. Separate locks can allow more parallelism. However a completely asynchronous operating system can be undesired, so balance is what I would have liked to achieve.  

			 MEMORY MAPPED FILES
			 ===================

---- DATA STRUCTURES ----

>> C1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

Some sort of struct for dealing with memory mapping is what I would have tried to use.

---- ALGORITHMS ----

>> C2: Describe how memory mapped files integrate into your virtual
>> memory subsystem.  Explain how the page fault and eviction
>> processes differ between swap pages and other pages.

A has table of memory mapped files was one idea I researched. Another idea was to use mmap and munmap. These combined with a hash table could allow files to be loaded in and out of memory.

>> C3: Explain how you determine whether a new file mapping overlaps
>> any existing segment.

Using file mapping with its file length could determine how many pages would be needed in memory. Then we could load things page by page without causing errors because we know their lengths.

---- RATIONALE ----

>> C4: Mappings created with "mmap" have similar semantics to those of
>> data demand-paged from executables, except that "mmap" mappings are
>> written back to their original files, not to swap.  This implies
>> that much of their implementation can be shared.  Explain why your
>> implementation either does or does not share much of the code for
>> the two situations.
Mmaped files could be loaded the same way executables are. This causes both to use the load_file function. Shared data could also be allowed between the two functions to make load_easier.

			   SURVEY QUESTIONS
			   ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?
This assignment was impossible. I felt it was too long, too hard, and we should get partners like the other universities allow.
>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

Couldn’t figure this project out so I feel like I learned nothing.

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

Explaining how pintos works more would help a lot. I did not find the design documents very helpful at all.

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?
Some more instruction on how to use C and how pintos works would have been very useful.
>> Any other comments?

Project was way too hard, we should get partners.
